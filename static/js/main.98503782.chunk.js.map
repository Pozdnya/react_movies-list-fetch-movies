{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onSetMovie","useState","setQuery","setMovie","isLoadingError","setIsLoadingError","isLoading","setIsloading","submitHandler","event","a","preventDefault","movieData","Title","Plot","Poster","imdbID","newMovie","onSubmit","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","App","setMovies","addMovie","useCallback","every","film","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98503782.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=3bc85056';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { memo, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  onSetMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = memo(({ onSetMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsLoadingError(false);\n    setQuery(event.target.value);\n  };\n\n  const submitHandler = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsloading(true);\n\n    try {\n      const movieData = await getMovie(query);\n\n      if ('Error' in movieData) {\n        setIsLoadingError(true);\n      } else {\n        const {\n          Title,\n          Plot,\n          Poster,\n          imdbID,\n        } = movieData;\n\n        const imgUrl = Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster;\n\n        const newMovie = {\n          title: Title,\n          description: Plot,\n          imgUrl,\n          imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n          imdbId: imdbID,\n        };\n\n        setMovie(newMovie);\n      }\n    } catch (error) {\n      setIsLoadingError(true);\n      throw new Error(`Error: ${error}`);\n    } finally {\n      setIsloading(false);\n    }\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      onSetMovie(movie);\n    }\n\n    setQuery('');\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={submitHandler}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', { 'is-dander': isLoadingError })}\n              value={query}\n              onChange={handleQuery}\n            />\n          </div>\n\n          {isLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', { 'is-loading': isLoading })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { memo, useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = memo(() => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    const isNewMovie = movies.every(film => (\n      film.imdbId !== movie.imdbId\n    ));\n\n    if (isNewMovie) {\n      setMovies(prevMovies => [...prevMovies, movie]);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onSetMovie={addMovie} />\n      </div>\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}